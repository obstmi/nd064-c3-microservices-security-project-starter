[INFO] 18.09 CIS Docker Community Edition Benchmark
[INFO] 1 Host Configuration
[INFO] 1.1 General Configuration
[WARN] 1.1.1 Ensure the container host has been Hardened (Not Scored)
[WARN] 1.1.2 Ensure that the version of Docker is up to date (Not Scored)
[INFO] 1.2 Linux Hosts Specific Configuration
[FAIL] 1.2.1 Ensure a separate partition for containers has been created (Scored)
	 grep: /proc/mounts: No such file or directory
	 
[WARN] 1.2.2 Ensure only trusted users are allowed to control Docker daemon (Scored)
[FAIL] 1.2.3 Ensure auditing is configured for the docker daemon (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.4 Ensure auditing is configured for Docker files and directories - /var/lib/docker (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.5 Ensure auditing is configured for Docker files and directories - /etc/docker (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.6 Ensure auditing is configured for Docker files and directories - docker.service (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 /bin/sh: line 1: auditctl: command not found
	 /bin/sh: line 1: systemctl: command not found
	 usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
	 	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	 	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	 	[--null] [pattern] [file ...]
	 
[FAIL] 1.2.7 Ensure auditing is configured for Docker files and directories - docker.socket (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 /bin/sh: line 1: auditctl: command not found
	 /bin/sh: line 1: systemctl: command not found
	 usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
	 	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	 	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	 	[--null] [pattern] [file ...]
	 
[FAIL] 1.2.8 Ensure auditing is configured for Docker files and directories - /etc/default/docker (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.9 Ensure auditing is configured for Docker files and directories - /etc/sysconfig/docker (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.10 Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.11 Ensure auditing is configured for Docker files and directories - /usr/bin/docker-containerd (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[FAIL] 1.2.12 Ensure auditing is configured for Docker files and directories - /usr/sbin/runc (Scored)
	 /bin/sh: line 1: auditctl: command not found
	 
[INFO] 2 Docker daemon configuration
[FAIL] 2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
	 bridge: map[com.docker.network.bridge.default_bridge:true com.docker.network.bridge.enable_icc:true com.docker.network.bridge.enable_ip_masquerade:true com.docker.network.bridge.host_binding_ipv4:0.0.0.0 com.docker.network.bridge.name:docker0 com.docker.network.driver.mtu:65535]
	 dvpwa_default: map[]
	 fiber-order-service-ui_default: map[]
	 frontend_default: map[]
	 host: map[]
	 none: map[]
	 udacredit-monolith_default: map[]
	 
[PASS] 2.2.a Ensure the logging level is set to 'info' (Scored)
[FAIL] 2.2.b Ensure the logging level is set to 'info' (Scored)
	 grep: /etc/docker/daemon.json: No such file or directory
	 
[PASS] 2.3 Ensure Docker is allowed to make changes to iptables (Scored)
[WARN] 2.4 Ensure insecure registries are not used (Scored)
[PASS] 2.5 Ensure aufs storage driver is not used (Scored)
[FAIL] 2.6.a Ensure TLS authentication for Docker daemon is configured (Scored)
	   501 37848 37846   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[FAIL] 2.6.b Ensure TLS authentication for Docker daemon is configured (Scored)
	 grep: /etc/docker/daemon.json: No such file or directory
	 
[WARN] 2.7 Ensure the default ulimit is configured appropriately (Not Scored)
[FAIL] 2.8 Enable user namespace support (Scored)
	 [name=seccomp,profile=unconfined name=cgroupns]
	 
[PASS] 2.9.a Ensure the default cgroup usage has been confirmed (Scored)
[PASS] 2.9.b Ensure the default cgroup usage has been confirmed (Scored)
[PASS] 2.10.a Ensure base device size is not changed until needed (Scored)
[PASS] 2.10.b Ensure base device size is not changed until needed (Scored)
[FAIL] 2.11.a Ensure that authorization for Docker client commands is enabled (Scored)
	   501 37878 37876   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[PASS] 2.11.b Ensure that authorization for Docker client commands is enabled (Scored)
[FAIL] 2.12 Ensure centralized and remote logging is configured (Scored)
	   501 37884 37882   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[FAIL] 2.13.a Ensure live restore is Enabled (Scored)
	   501 37887 37885   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[FAIL] 2.13.b Ensure live restore is Enabled (Scored)
	 grep: /etc/docker/daemon.json: No such file or directory
	 
[FAIL] 2.14.a Ensure Userland Proxy is Disabled (Scored)
	   501 37893 37891   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[FAIL] 2.14.b Disable Userland Proxy (Scored)
	 grep: /etc/docker/daemon.json: No such file or directory
	 
[PASS] 2.15 Ensure that a daemon-wide custom seccomp profile is applied if appropriate (Not Scored)
[PASS] 2.16 Ensure that experimental features are not implemented in production (Scored)
[FAIL] 2.17.a Ensure containers are restricted from acquiring new privileges (Scored)
	   501 37915 37913   0 12:55pm ttys001    0:00.00 grep dockerd
	 
[FAIL] 2.17.b Ensure containers are restricted from acquiring new privileges (Scored)
	 grep: /etc/docker/daemon.json: No such file or directory
	 
[INFO] 3 Docker daemon configuration files
[FAIL] 3.1 Ensure that docker.service file ownership is set to root:root (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 
[FAIL] 3.2 Ensure that docker.service file permissions are appropriately set (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 
[FAIL] 3.3 Ensure that docker.socket file ownership is set to root:root (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 
[FAIL] 3.4 Ensure that docker.socket file permissions are set to 644 or more restrictive (Scored)
	 /bin/sh: line 1: systemctl: command not found
	 
[FAIL] 3.5 Ensure that /etc/docker directory ownership is set to root:root (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[FAIL] 3.6 Ensure that /etc/docker directory permissions are set to 755 or more restrictive (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[FAIL] 3.7 Ensure that registry certificate file ownership is set to root:root (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[FAIL] 3.8 Ensure that registry certificate file permissions are set to 444 or more restrictive (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[WARN] 3.9 Ensure that TLS CA certificate file ownership is set to root:root (Scored)
[WARN] 3.10 Ensure that TLS CA certificate file permissions are set to 444 or more restrictive (Scored)
[WARN] 3.11 Ensure that Docker server certificate file ownership is set to root:root (Scored)
[WARN] 3.12 Ensure that Docker server certificate file permissions are set to 444 or more restrictive (Scored)
[WARN] 3.13 Ensure that Docker server certificate key file ownership is set to root:root (Scored)
[WARN] 3.14 Ensure that the Docker server certificate key file permissions are set to 400 (Scored)
[FAIL] 3.15 Ensure that Docker socket file ownership is set to root:docker (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[FAIL] 3.16 Ensure that Docker socket file permissions are set to 660 or more restrictive (Scored)
	 stat: illegal option -- c
	 usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
	 
[FAIL] 3.17 Ensure that daemon.json file ownership is set to root:root (Scored)
[FAIL] 3.18 Ensure that daemon.json file permissions are set to 644 or more restrictive (Scored)
[FAIL] 3.19 Ensure that /etc/default/docker file ownership is set to root:root (Scored)
[FAIL] 3.20 Ensure that the /etc/sysconfig/docker file ownership is set to root:root (Scored)
[FAIL] 3.21 Ensure that /etc/sysconfig/docker file permissions are set to 644 or more restrictive (Scored)
[FAIL] 3.22 Ensure that /etc/default/docker file permissions are set to 644 or more restrictive (Scored)
[INFO] 4 Container Images and Build File Configuration
[FAIL] 4.1 Ensure that a user for the container has been created (Scored)
	 User=0
	 User=999
	 User=70
	 
[WARN] 4.2 Ensure that containers use only trusted base images (Not Scored)
[WARN] 4.3 Ensure that unnecessary packages are not installed in the container (Not Scored)
[WARN] 4.4 Ensure images are scanned and rebuilt to include security patches (Not Scored)
[FAIL] 4.5 Ensure Content trust for Docker is Enabled (Scored)
	 DOCKER_CONTENT_TRUST=
	 
[WARN] 4.6 Ensure HEALTHCHECK instructions have been added to the container images (Scored)
[WARN] 4.7 Ensure update instructions are not use alone in the Dockerfile (Not Scored)
[WARN] 4.8 Ensure setuid and setgid permissions are removed (Not Scored)
[WARN] 4.9 Ensure COPY is used instead of ADD in Dockerfile (Not Scored)
[WARN] 4.10 Ensure secrets are not stored in Dockerfiles (Not Scored)
[WARN] 4.11 Ensure only verified packages are are Installed (Not Scored)
[INFO] 5 Container Runtime Configuration
[WARN] 5.1 Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[WARN] 5.2 Ensure that, if applicable, SELinux security options are set(Scored)
[WARN] 5.3 Ensure that Linux Kernel capabilities are restricted within containers (Scored)
[PASS] 5.4 Ensure that privileged containers are not used (Scored)
[PASS] 5.5 Ensure sensitive host system directories are not mounted on containers (Scored)
[WARN] 5.6 Ensure sshd is not run within containers (Scored)
[WARN] 5.7 Ensure privileged ports are not mapped within containers (Scored)
[WARN] 5.8 Ensure that only needed ports are open on the container (Not Scored)
[PASS] 5.9 Ensure that the host's network namespace is not shared (Scored)
[FAIL] 5.10 Ensure that the memory usage for container is limited (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:Memory=0
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:Memory=0
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:Memory=0
	 665c2eef412559a09f339c88026112f849332fcf5437efc21187cf22188de284:Memory=0
	 0387d7675bd2dded1873341c10cb3bf8edebb2360fcf81f74f01893922108b0c:Memory=0
	 788aec914fa214e3c21522d87a68fa0a896673c2a60da893fe3a87f7c0b6ae19:Memory=0
	 5c89b44011b3ce286cb5483bfccf7427971a5769a94ed710c1c80cf686bb9d38:Memory=0
	 8cd1c4ba36071973145da8c14ee3dcab89ee31f73838b0491feaaa0231d7c81d:Memory=0
	 feb32cc1cce19f3250defc1c4f0b80db243abeb05c5e64d72961c881f0b5b159:Memory=0
	 
[FAIL] 5.11 Ensure that CPU priority is set appropriately on container (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:CpuShares=0
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:CpuShares=0
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:CpuShares=0
	 665c2eef412559a09f339c88026112f849332fcf5437efc21187cf22188de284:CpuShares=0
	 0387d7675bd2dded1873341c10cb3bf8edebb2360fcf81f74f01893922108b0c:CpuShares=0
	 788aec914fa214e3c21522d87a68fa0a896673c2a60da893fe3a87f7c0b6ae19:CpuShares=0
	 5c89b44011b3ce286cb5483bfccf7427971a5769a94ed710c1c80cf686bb9d38:CpuShares=0
	 8cd1c4ba36071973145da8c14ee3dcab89ee31f73838b0491feaaa0231d7c81d:CpuShares=0
	 feb32cc1cce19f3250defc1c4f0b80db243abeb05c5e64d72961c881f0b5b159:CpuShares=0
	 
[FAIL] 5.12 Ensure that the container's root filesystem is mounted as read only (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:ReadonlyRootfs=false
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:ReadonlyRootfs=false
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:ReadonlyRootfs=false
	 665c2eef412559a09f339c88026112f849332fcf5437efc21187cf22188de284:ReadonlyRootfs=false
	 0387d7675bd2dded1873341c10cb3bf8edebb2360fcf81f74f01893922108b0c:ReadonlyRootfs=false
	 788aec914fa214e3c21522d87a68fa0a896673c2a60da893fe3a87f7c0b6ae19:ReadonlyRootfs=false
	 5c89b44011b3ce286cb5483bfccf7427971a5769a94ed710c1c80cf686bb9d38:ReadonlyRootfs=false
	 8cd1c4ba36071973145da8c14ee3dcab89ee31f73838b0491feaaa0231d7c81d:ReadonlyRootfs=false
	 feb32cc1cce19f3250defc1c4f0b80db243abeb05c5e64d72961c881f0b5b159:ReadonlyRootfs=false
	 
[FAIL] 5.13 Ensure that incoming container traffic is bound to a specific host interface (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:Ports=map[8080/tcp:[map[HostIp:0.0.0.0 HostPort:8080]]]
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:Ports=map[6379/tcp:<nil>]
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:Ports=map[5432/tcp:[map[HostIp:0.0.0.0 HostPort:5432]]]
	 
[PASS] 5.14 Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[PASS] 5.15 Ensure that the host's process namespace is not shared (Scored)
[PASS] 5.16 Ensure that the host's IPC namespace is not shared (Scored)
[WARN] 5.17 Ensure that host devices are not directly exposed to containers (Not Scored)
[WARN] 5.18 Ensure that the default ulimit is overwritten at runtime, only if needed (Not Scored)
[WARN] 5.19 Ensure mount propagation mode is not set to shared (Scored)
[PASS] 5.20 Ensure that the host's UTS namespace is not shared (Scored)
[PASS] 5.21 Ensure the default seccomp profile is not Disabled (Scored)
[FAIL] 5.22 Ensure that docker exec commands are not used with the privileged option (Scored)
	 /bin/sh: line 1: ausearch: command not found
	 
[FAIL] 5.23 Ensure that docker exec commands are not used with the user=root option (Not Scored)
	 /bin/sh: line 1: ausearch: command not found
	 
[WARN] 5.24 Ensure cgroup usage is confirmed (Scored)
[FAIL] 5.25 Ensure that the container is restricted from acquiring additional privileges (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:SecurityOpt=<no value>
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:SecurityOpt=<no value>
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:SecurityOpt=<no value>
	 665c2eef412559a09f339c88026112f849332fcf5437efc21187cf22188de284:SecurityOpt=<no value>
	 0387d7675bd2dded1873341c10cb3bf8edebb2360fcf81f74f01893922108b0c:SecurityOpt=<no value>
	 788aec914fa214e3c21522d87a68fa0a896673c2a60da893fe3a87f7c0b6ae19:SecurityOpt=<no value>
	 5c89b44011b3ce286cb5483bfccf7427971a5769a94ed710c1c80cf686bb9d38:SecurityOpt=<no value>
	 8cd1c4ba36071973145da8c14ee3dcab89ee31f73838b0491feaaa0231d7c81d:SecurityOpt=<no value>
	 feb32cc1cce19f3250defc1c4f0b80db243abeb05c5e64d72961c881f0b5b159:SecurityOpt=<no value>
	 
[WARN] 5.26 Ensure that container health is checked at runtime (Scored)
[WARN] 5.27 Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[FAIL] 5.28 Ensure that the PIDs cgroup limit is used (Scored)
	 603d33e9d8277ea020b49a224b19c28d1fa6ff346fd56425f8e04061016fce09:PidsLimit=<no value>
	 f7b95f746bff21946786591daede5d3eba0097b3e38f656b8a41260d5a9cd1a2:PidsLimit=<no value>
	 8be16acffa1d3e878d3fb281e9cf384aec741e388f5670ebbb11eda236695813:PidsLimit=<no value>
	 665c2eef412559a09f339c88026112f849332fcf5437efc21187cf22188de284:PidsLimit=<no value>
	 0387d7675bd2dded1873341c10cb3bf8edebb2360fcf81f74f01893922108b0c:PidsLimit=<no value>
	 788aec914fa214e3c21522d87a68fa0a896673c2a60da893fe3a87f7c0b6ae19:PidsLimit=<no value>
	 5c89b44011b3ce286cb5483bfccf7427971a5769a94ed710c1c80cf686bb9d38:PidsLimit=<no value>
	 8cd1c4ba36071973145da8c14ee3dcab89ee31f73838b0491feaaa0231d7c81d:PidsLimit=<no value>
	 feb32cc1cce19f3250defc1c4f0b80db243abeb05c5e64d72961c881f0b5b159:PidsLimit=<no value>
	 
[WARN] 5.29 Ensure that Docker's default bridge docker0 is not used (Not Scored)
[PASS] 5.30 Ensure that the host's user namespaces is not shared (Scored)
[PASS] 5.31 Ensure that the Docker socket is not mounted inside any containers (Scored)
[INFO] 6 Docker Security Operations
[WARN] 6.1 Ensure that image sprawl is avoided (Not Scored)
[WARN] 6.2 Ensure that container sprawl is avoided (Not Scored)
[INFO] 7 Docker Swarm Configuration
[INFO] 7.1 Ensure swarm mode is not Enabled, if not needed (Scored)
[INFO] 7.2 Ensure that the minimum number of manager nodes have been created in a swarm (Scored)
[INFO] 7.3 Ensure that swarm services are bound to a specific host interface (Scored)
[INFO] 7.4 Ensure data exchanged between containers are encrypted on different nodes on the overlay network (Scored)
[INFO] 7.5 Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster (Not Scored)
[INFO] 7.6 Ensure that swarm manager is run in auto-lock mode (Scored)
[INFO] 7.7 Ensure that the swarm manager auto-lock key is rotated periodically (Not Scored)
[INFO] 7.8 Ensure that node certificates are rotated as appropriate (Not Scored)
[INFO] 7.9 Ensure that CA certificates are rotated as appropriate (Not Scored)
[INFO] 7.10 Ensure that management plane traffic is separated from data plane traffic (Not Scored)
[INFO] 8 Docker Enterprise Configuration
[INFO] 8.1 Universal Control Plane Configuration
[WARN] 8.1.1 Configure the LDAP authentication service (Scored)
[WARN] 8.1.2 Use external certificates (Scored)
[WARN] 8.1.3 Enforce the use of client certificate bundles for unprivileged users (Not Scored)
[WARN] 8.1.4 Configure applicable cluster role-based access control policies (Not Scored)
[WARN] 8.1.5 Enable signed image enforcement (Scored)
[WARN] 8.1.6 Set the Per-User Session Limit to a value of '3' or lower (Scored)
[WARN] 8.1.7 Set the "Lifetime Minutes" and "Renewal Threshold Minutes" values to '15' or lower and '0' respectively (Scored)
[INFO] 8.2 Docker Trusted Registry Configuration
[WARN] 8.2.1 Enable image vulnerability scanning (Scored)

== Remediations ==
1.1.1 You may consider various CIS Security Benchmarks for your container host. 
If you have other security guidelines or regulatory requirements 
to adhere to, please follow them as suitable in your environment. 

1.1.2 You should monitor versions of Docker releases and make sure
your software is updated as required.

1.2.1 grep: /proc/mounts: No such file or directory

1.2.2 You should remove any untrusted users from the docker group. 
Additionally, you should not create a mapping of sensitive directories from the host to container volumes."

1.2.3 /bin/sh: line 1: auditctl: command not found

1.2.4 /bin/sh: line 1: auditctl: command not found

1.2.5 /bin/sh: line 1: auditctl: command not found

1.2.6 /bin/sh: line 1: systemctl: command not found
/bin/sh: line 1: auditctl: command not found
/bin/sh: line 1: systemctl: command not found
usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	[--null] [pattern] [file ...]

1.2.7 /bin/sh: line 1: systemctl: command not found
/bin/sh: line 1: auditctl: command not found
/bin/sh: line 1: systemctl: command not found
usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	[--null] [pattern] [file ...]

1.2.8 /bin/sh: line 1: auditctl: command not found

1.2.9 /bin/sh: line 1: auditctl: command not found

1.2.10 /bin/sh: line 1: auditctl: command not found

1.2.11 /bin/sh: line 1: auditctl: command not found

1.2.12 /bin/sh: line 1: auditctl: command not found

2.1 Edit the Docker daemon configuration file to ensure that icc is disabled. It should include
the following setting
"icc": false
Alernatively, run the docker daemon directly and pass --icc=false as an argument. 
For Example, 
dockerd --icc=false

2.2.b grep: /etc/docker/daemon.json: No such file or directory

2.4 You should ensure that no insecure registries are in use.

2.6.a Follow the steps mentioned in the Docker documentation or other references.

2.6.b Follow the steps mentioned in the Docker documentation or other references.

2.7 Run the docker in daemon mode and pass --default-ulimit as argument with respective
ulimits as appropriate in your environment.
For Example,
dockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200

2.8 Please consult the Docker documentation for various ways in which this can be configured 
depending upon your requirements. Your steps might also vary based on platform - For 
example, on Red Hat, sub-UIDs and sub-GIDs mapping creation do not work automatically.
You might have to create your own mapping.
The high-level steps are as below: 
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.
touch /etc/subuid /etc/subgid
Step 2: Start the docker daemon with --userns-remap flag 
dockerd --userns-remap=default

2.11.a Step 1: Install/Create an authorization plugin.
Step 2: Configure the authorization policy as desired.
Step 3: Start the docker daemon as below:
dockerd --authorization-plugin=<PLUGIN_ID>

2.12 Step 1: Setup the desired log driver by following its documentation.
Step 2: Start the docker daemon with that logging driver.
For example,
dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx

2.13.a Run the docker in daemon mode and pass --live-restore as an argument.
For Example,
dockerd --live-restore

2.13.b Run the docker in daemon mode and pass --live-restore as an argument.
For Example,
dockerd --live-restore

2.14.a You should run the Docker daemon as below:
dockerd --userland-proxy=false

2.14.b You should run the Docker daemon as below:
dockerd --userland-proxy=false

2.17.a You should run the Docker daemon as below:
dockerd --no-new-privileges

2.17.b For example, you should start your container as below:
docker run --rm -it --security-opt=no-new-privileges ubuntu bash

3.1 Step 1: Find out the file location:
systemctl show -p FragmentPath docker.service
Step 2: If the file does not exist, this recommendation is not applicable. If the file does exists,
you should execute the below command with the correct file path to set the ownership and group
ownership and group for the file to root .
For example,
chown root:root /usr/lib/systemd/system/docker.service

3.2 Step 1: Find out the file location:
systemctl show -p FragmentPath docker.service
Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
execute the below command with the correct file path to set the file permissions to 644 .
For example,
chmod 644 /usr/lib/systemd/system/docker.service

3.3 Step 1: Find out the file location:
systemctl show -p FragmentPath docker.socket
Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
execute the command below, including the correct file path to set the ownership and group
ownership for the file to root .
For example,
chown root:root /usr/lib/systemd/system/docker.socket

3.4 Step 1: Find out the file location:
systemctl show -p FragmentPath docker.socket
Step 2: If the file does not exist, this recommendation is not applicable. If the file does exists, you
should execute the command below, including the correct file path in order to verify that 
the file permissions are set to 644 or more restrictively.      
For example,
chmod 644 /usr/lib/systemd/system/docker.socket

3.5 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.6 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.7 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.8 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.9 You should execute the following command:
chown root:root <path to TLS CA certificate file>
This sets the individual ownership and group ownership for the TLS CA certificate file to root.

3.10 You should execute the following command: chmod 444 <path to TLS CA certificate file>
chmod 444 <path to TLS CA certificate file>
This sets the file permissions on the TLS CA file to 444.

3.11 You should run the following command:
chown root:root <path to Docker server certificate file>
This sets the individual ownership and the group ownership for the Docker server
certificate file to root.

3.12 You should execute the command below:
chmod 444 <path to Docker server certificate file>
This sets the file permissions of the Docker server certificate file to 444 .

3.13 You should execute the following command:
chown root:root <path to Docker server certificate key file>
This sets the individual ownership and group ownership for the Docker server certificate
key file to root.

3.14 You should execute the following command:
chmod 400 <path to Docker server certificate key file>
This sets the Docker server certificate key file permissions to 400 .

3.15 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.16 stat: illegal option -- c
usage: stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]

3.17 You should execute the command below:
chown root:root /etc/docker/daemon.json
This sets the ownership and group-ownership for the file to root .

3.18 You should execute the command below
chmod 644 /etc/docker/daemon.json
This sets the file permissions for this file to 644.

3.19 You should execute the following command
chown root:root /etc/default/docker
This  sets the ownership and group-ownership for the file to root .

3.20 You should execute the following command
chown root:root /etc/sysconfig/docker
This  sets the ownership and group-ownership for the file to root .

3.21 You should execute the following command:
chmod 644 /etc/sysconfig/docker
This sets the file permissions for this file to 644.

3.22 You should execute the following command:
chmod 644 /etc/default/docker
This sets the file permissions for this file to 644.

4.1 You should ensure that the Dockerfile for each container image contains the information below:
USER <username or ID>
In this case, the user name or ID refers to the user that was found in the container base
image. If there is no specific user created in the container base image, then make use of the
useradd command to add a specific user before the USER instruction in the Dockerfile.
For example, add the below lines in the Dockerfile to create a user in the container:
RUN useradd -d /home/username -m -s /bin/bash username
USER username
Note: If there are users in the image that are not needed, you should consider deleting
them. After deleting those users, commit the image and then generate new instances of the
containers.
Alternatively, if it is not possible to set the USER directive in the Dockerfile, a script running
as part of the CMD or ENTRYPOINT sections of the Dockerfile should be used to ensure that
the container process switches to a non-root user.

4.2 The following procedures are useful for establishing trust for a specific image.
- Configure and use Docker Content trust.
- View the history of each Docker image to evaluate its risk, dependent on the
  sensitivity of the application you wish to deploy using it.
- Scan Docker images for vulnerabilities at regular intervals.

4.3 You should not install anything within the container that is not required.
You should consider using a minimal base image rather than the standard
Redhat/Centos/Debian images if you can. Some of the options available include BusyBox
and Alpine.
Not only can this trim your image size considerably, but there would also be fewer pieces of
software which could contain vectors for attack.

4.4 Images should be re-built ensuring that the latest version of the base images are used, to
keep the operating system patch level at an appropriate level. Once the images have been
re-built, containers should be re-started making use of the updated images.

4.5 To enable content trust in a bash shell, enter the following command:
export DOCKER_CONTENT_TRUST=1
Alternatively, you could set this environment variable in your profile file so that content 
trust in enabled on every login.

4.6 You should follow the Docker documentation and rebuild your container images to include
the HEALTHCHECK instruction.

4.7 You should use update instructions together with install instructions and version pinning
for packages while installing them. This prevent caching and force the extraction of the
required versions.
Alternatively, you could use the --no-cache flag during the docker build process to avoid
using cached layers.

4.8 You should allow setuid and setgid permissions only on executables which require them.
You could remove these permissions at build time by adding the following command in
your Dockerfile, preferably towards the end of the Dockerfile:
RUN find / -perm /6000 -type f -exec chmod a-s {} \; || true

4.9 You should use COPY rather than ADD instructions in Dockerfiles.

4.10 Do not store any kind of secrets within Dockerfiles. Where secrets are required during the 
build process, make use of a secrets management tool, such as the buildkit builder included 
with Docker.

4.11 You should use a secure package distribution mechanism of your choice to ensure the 
authenticity of software packages.

5.1 If AppArmor is applicable for your Linux OS, you should enable it.
      1. Verify if AppArmor is installed. If not, install it.
      2. Create or import a AppArmor profile for Docker containers.
      3. Put this profile in enforcing mode.
      4. Start your Docker container using the customized AppArmor profile. For example,
docker run --interactive --tty --security-opt="apparmor:PROFILENAME" centos
/bin/bash
Alternatively, Docker's default AppArmor policy can be used.

5.2 If SELinux is applicable for your Linux OS, you should use it.
        1. Set the SELinux State.
        2. Set the SELinux Policy.
        3. Create or import a SELinux policy template for Docker containers.
        4. Start Docker in daemon mode with SELinux enabled. For example,
  docker daemon --selinux-enabled
        5. Start your Docker container using the security options. For example,
  docker run --interactive --tty --security-opt label=level:TopSecret centos
  /bin/bash

5.3 You should execute the command below to add required capabilities:
docker run --cap-add={"Capability 1","Capability 2"} <Run arguments>
<Container Image Name or ID> <Command>
You should execute the command below to remove unneeded capabilities:
docker run --cap-drop={"Capability 1","Capability 2"} <Run arguments>
<Container Image Name or ID> <Command>
Alternatively, you could remove all the currently configured capabilities and then restore
only the ones you specifically use:
docker run --cap-drop=all --cap-add={"Capability 1","Capability 2"} <Run
arguments> <Container Image Name or ID> <Command>

5.6 Uninstall the SSH daemon from the container and use and use docker exec to enter a
container on the remote host.
docker exec --interactive --tty $INSTANCE_ID sh
OR
docker attach $INSTANCE_ID

5.7 You should not map container ports to privileged host ports when starting a container. You
should also, ensure that there is no such container to host privileged port mapping
declarations in the Dockerfile.

5.8 You should ensure that the Dockerfile for each container image only exposes needed ports. 
You can also completely ignore the list of ports defined in the Dockerfile by NOT using -P 
(UPPERCASE) or the --publish-all flag when starting the container. Instead, use the -p 
(lowercase) or --publish flag to explicitly define the ports that you need for a particular
container instance.
For example,
docker run --interactive --tty --publish 5000 --publish 5001 --publish 5002
centos /bin/bash

5.10 You should run the container with only as much memory as it requires by using the --
memory argument.
For example, you could run a container using the command below:
docker run --interactive --tty --memory 256m centos /bin/bash
In the example above, the container is started with a memory limit of 256 MB.
Note that the output of the command below returns values in scientific notation if memory
limits are in place.
docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0
For example, if the memory limit is set to 256 MB for a container instance, the output of the
command above would be 2.68435456e+08 and NOT 256m. You should convert this value
using a scientific calculator.

5.11 You should manage the CPU runtime between your containers dependent on their priority
within your organization. To do so start the container using the --cpu-shares argument.
For example, you could run a container as below:
docker run --interactive --tty --cpu-shares 512 centos /bin/bash
In the example above, the container is started with CPU shares of 50% of what other
containers use. So if the other container has CPU shares of 80%, this container will have
CPU shares of 40%.
Every new container will have 1024 shares of CPU by default. However, this value is shown
as 0 if you run the command mentioned in the audit section.
Alternatively:
1. Navigate to the /sys/fs/cgroup/cpu/system.slice/ directory.
2. Check your container instance ID using docker ps.
3. Inside the above directory (in step 1), you could have a directory called, for
   example: docker-<Instance ID>.scope. For example, docker-
   example: docker-<Instance ID>.scope. For example, docker-
   example: docker-<Instance ID>.scope. For example, docker-
4. You will find a file named cpu.shares. Execute cat cpu.shares. This will always
   give you the CPU share value based on the system. Even if there are no CPU shares
   configured using the -c or --cpu-shares argument in the docker run command,
   this file will have a value of 1024.
If you set one container's CPU shares to 512 it will receive half of the CPU time compared to
the other containers. So if you take 1024 as 100% you can then derive the number that you
should set for respective CPU shares. For example, use 512 if you want to set it to 50% and
256 if you want to set it 25%.
      

5.12 You should add a --read-only flag at a container's runtime to enforce the container's root
filesystem being mounted as read only.
docker run <Run arguments> --read-only <Container Image Name or ID> <Command>
Enabling the --read-only option at a container's runtime should be used by administrators
to force a container's executable processes to only write container data to explicit storage
locations during its lifetime.
Examples of explicit storage locations during a container's runtime include, but are not
limited to:
1. Using the --tmpfs option to mount a temporary file system for non-persistent data
   writes.
docker run --interactive --tty --read-only --tmpfs "/run" --tmpfs "/tmp"
centos /bin/bash
2. Enabling Docker rw mounts at a container's runtime to persist container data
   directly on the Docker host filesystem.
docker run --interactive --tty --read-only -v /opt/app/data:/run/app/data:rw
centos /bin/bash
3. Utilizing Docker shared-storage volume plugins for Docker data volume to persist
   container data.
docker volume create -d convoy --opt o=size=20GB my-named-volume
docker run --interactive --tty --read-only -v my-named-volume:/run/app/data
centos /bin/bash
3. Transmitting container data outside of the Docker controlled area during the
   container's runtime for container data in order to ensure that it is persistent.
   Examples include hosted databases, network file shares and APIs.
   

5.13 You should bind the container port to a specific host interface on the desired host port.
For example,
docker run --detach --publish 10.2.3.4:49153:80 nginx
In the example above, the container port 80 is bound to the host port on 49153 and would
accept incoming connection only from 10.2.3.4 external interface.

5.17 You should not directly expose host devices to containers. If you do need to expose host
devices to containers, you should use granular permissions as appropriate to your
devices to containers, you should use granular permissions as appropriate to your
For example, do not start a container using the command below:
docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm --
device=/dev/temp_sda:/dev/temp_sda:rwm centos bash
You should only share the host device using appropriate permissions:
docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw --
device=/dev/temp_sda:/dev/temp_sda:r centos bash

5.18 You should only override the default ulimit settings if needed in a specific case.
For example, to override default ulimit settings start a container as below:
docker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash

5.19 Do not mount volumes in shared mode propagation.
For example, do not start container as below:
docker run <Run arguments> --volume=/hostPath:/containerPath:shared
<Container Image Name or ID> <Command>

5.22 /bin/sh: line 1: ausearch: command not found

5.23 /bin/sh: line 1: ausearch: command not found

5.24 You should not use the --cgroup-parent option within the docker run command unless 
strictly required.

5.25 You should start your container with the options below: 
docker run --rm -it --security-opt=no-new-privileges ubuntu bash    scored: true

5.26 You should run the container using the --health-cmd parameter.
For example,
docker run -d --health-cmd='stat /etc/passwd || exit 1' nginx

5.27 You should use proper version pinning mechanisms (the "latest" tag which is assigned by
default is still vulnerable to caching attacks) to avoid extracting cached older versions.
Version pinning mechanisms should be used for base images, packages, and entire images.
You can customize version pinning rules according to your requirements.

5.28 Use --pids-limit flag with an appropriate value when launching the container.
For example,
docker run -it --pids-limit 100 <Image_ID>
In the above example, the number of processes allowed to run at any given time is set to
100. After a limit of 100 concurrently running processes is reached, Docker would restrict
any new process creation.

5.29 You should follow the Docker documentation and set up a user-defined network. All the
containers should be run in this network.

6.1 You should keep only the images that you actually need and establish a workflow to
remove old or stale images from the host. Additionally, you should use features such as
pull-by-digest to get specific images from the registry.
You can follow the steps below to find unused images on the system so they can be deleted.
Step 1 Make a list of all image IDs that are currently instantiated by executing the
command below:
docker images --quiet | xargs docker inspect --format '{{ .Id }}: Image={{
        .Config.Image }}'
Step 2: List all the images present on the system by executing the command below:
docker images
Step 3: Compare the list of image IDs from Step 1 and Step 2 and look for images that are
currently not in use. If any unused or old images are found, discuss with the system
administrator the need to keep such images on the system. If images are no longer needed
they should be deleted.

6.2 You should periodically check your container inventory on each host and clean up
containers which are not in active use with the command below:
docker container prune

7.1 Test marked as skip
7.2 Test marked as skip
7.3 Test marked as skip
7.4 Test marked as skip
7.5 Test marked as skip
7.6 Test marked as skip
7.7 Test marked as skip
7.8 Test marked as skip
7.9 Test marked as skip
7.10 Test marked as skip
8.1.1 You can configure LDAP integration via the UCP "Admin Settings" UI by following the
instructions here: "https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/".
LDAP integration can also be enabled via a configuration file by following
the instructions here: "https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/enable-ldap-config-file/".

8.1.2 You can configure your own certificates for UCP either during installation or after
installation via the UCP "Admin Settings" user interface.
Customize certificates during installation:
1. Create a volume named ucp-controller-server-certs on your primary UCP
   Manager installation node:
docker volume create ucp-controller-server-certs
2. Copy your external certificate authority's public certificate file (ca.pem) and your
   signed certificate (cert.pem) and key (key.pem) files to the root directory of the
   volume
cp ca.pem cert.pem key.pem $(docker volume inspect --format '{{ .Mountpoint
}}' ucp-controller-server-certs)/
3. Run the UCP installation command with the --external-server-cert flag

Customize certificates post-installation via the "Admin Settings" UI:
Refer to the instructions at
https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/use-your-own-tls-
certificates/#configure-ucp-to-use-your-own-tls-certificates-and-keys for configuring your
own certificates via the UCP UI.

8.1.3 Client certificate bundles can be created in one of two ways:
User Management UI
UCP Administrators can provision client certificate bundles on behalf of users by navigating
to the USER MANAGEMENT | USERS interface in UCP, selecting the user from the list,
clicking on the "Configure" button from the right-hand navigation, and selecting "Client
Bundle" from the drop-down. The "New Client Bundle" link can be selected to create a
client bundle. This will trigger a download of the bundle as a .zip file.
Self-Provision
Users with access to the UCP console can create client certificate bundles themselves. After
logging into the console, the user can select their username drop-down from the top-left
corner of the navigation page and select the "My Profile" option. From there, the "New
Client Bundle" link can be selected to create a client bundle and this will trigger a download
of the bundle as a .zip file.

8.1.4 UCP RBAC components can be configured as required via the UCP "User Management" UI.

8.1.5 None is mentioned

8.1.6 As a Docker Enterprise Administrator, execute the following commands from a machine
with connectivity to the UCP management console. Replace [ucp_url] with your UCP URL,
[ucp_username] with the username of a Docker Enterprise Administrator and
[ucp_password] with the password of a Docker Enterprise Administrator.
Step 1: Retrieve a UCP API token
Linux (requires curl and jq):
$ AUTHTOKEN=$(curl -sk -d
'{"username":"[ucp_username]","password":"[ucp_password]"}'
https://[ucp_url]/auth/login | jq -r .auth_token)
Step 2: Retrieve and save UCP config
Linux (requires curl):
$ curl -sk -H "Authorization: Bearer $AUTHTOKEN"
https://[ucp_url]/api/ucp/config-toml > ucp-config.toml
Step 3: Open the ucp-config.toml file, set the per_user_limit entry under the
[auth.sessions] section to a value of '3' or lower, but greater than '0'. Save the file.
Step 4: Execute the following command to update UCP with the new configuration:
Linux (requires curl):
$ curl -sk -H "Authorization: Bearer $AUTHTOKEN" --upload-file ucp-
config.toml https://[ucp_url]/api/ucp/config-toml

8.1.7 As a Docker Enterprise Administrator, execute the following commands from a machine
with connectivity to the UCP management console. Replace [ucp_url] with your UCP URL,
[ucp_username] with the username of a Docker Enterprise Administrator and
[ucp_password] with the password of a Docker Enterprise Administrator.
Step 1: Retrieve a UCP API token
Linux (requires curl and jq):
$ AUTHTOKEN=$(curl -sk -d
'{"username":"[ucp_username]","password":"[ucp_password]"}'
https://[ucp_url]/auth/login | jq -r .auth_token)
Step 2: Retrieve and save UCP config
Linux (requires curl):
$ curl -sk -H "Authorization: Bearer $AUTHTOKEN"
https://[ucp_url]/api/ucp/config-toml > ucp-config.toml
Step 3: Open the ucp-config.toml file, set the lifetime_minutes and
renewal_threshold_minutes entries under the [auth.sessions] section to values of '15'
or lower and '0' respectively. Save the file.
Step 4: Execute the following command to update UCP with the new configuration:
Linux (requires curl):
$ curl -sk -H "Authorization: Bearer $AUTHTOKEN" --upload-file ucp-
config.toml https://[ucp_url]/api/ucp/config-toml

8.2.1 You can navigate to DTR "Settings" UI and select the "Security" tab to access the image
scanning configuration. Select the "Enable Scanning" slider to enable this functionality. You
can also enable the Image Scanning capability via the DTR API using the cURL command as
follows:
$ curl -X POST "https://<YOUR_DTR_URL>/api/v0/meta/settings" -H "accept:
application/json" -H "content-type: application/json" -d "{
\"scanningEnabled\": true}"


== Summary ==
20 checks PASS
50 checks FAIL
43 checks WARN
10 checks INFO
